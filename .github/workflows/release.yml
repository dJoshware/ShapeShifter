name: Build & Deploy (Docker Hub â†’ EC2)

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: prod-deploy
  cancel-in-progress: false

jobs:
  build_push:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.meta.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Derive tag
        id: meta
        run: |
          VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "TAG=v${VERSION}-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      # Prebuild outside Docker for clearer errors
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Lint & build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          npm run lint --if-present || echo "lint skipped"
          npm run build

      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ vars.DOCKER_IMAGE }}:${{ steps.meta.outputs.TAG }}
            ${{ vars.DOCKER_IMAGE }}:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  deploy_ec2:
    needs: build_push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            APP_DIR="${{ secrets.APP_DIR }}"
            IMAGE="${{ vars.DOCKER_IMAGE }}:${{ needs.build_push.outputs.TAG }}"

            sudo mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Install docker + compose if missing
            if ! command -v docker >/dev/null 2>&1; then curl -fsSL https://get.docker.com | sh; fi
            if ! docker compose version >/dev/null 2>&1; then
              DOCKER_CONFIG=${HOME}/.docker
              mkdir -p "$DOCKER_CONFIG/cli-plugins"
              curl -SL https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 -o "$DOCKER_CONFIG/cli-plugins/docker-compose"
              chmod +x "$DOCKER_CONFIG/cli-plugins/docker-compose"
            fi

            # Ensure env is readable
            sudo chown "$USER:$USER" /opt/shapeshifter/.env
            sudo chmod 600 /opt/shapeshifter/.env

            # Login only if repo is private
            if [ -n "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]; then
              echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin || true
            fi

            # Create compose on first run
            if [ ! -f docker-compose.yml ]; then
              cat > docker-compose.yml <<'YML'
                services:
                  app:
                  image: REPLACE_IMAGE
                  container_name: shapeshifter
                  restart: unless-stopped
                  env_file:
                    - /opt/shapeshifter/.env
                  ports:
                    - "127.0.0.1:3000:3000"
                  healthcheck:
                    test: ["CMD-SHELL", "node -e \"http=require('http');http.get('http://127.0.0.1:3000/',r=>process.exit(r.statusCode<500?0:1)).on('error',()=>process.exit(1))\""]
                    interval: 30s
                    timeout: 5s
                    retries: 5
                    start_period: 10s
              YML
            fi

            # Make sure the image tag is current
            sed -i "s|^[[:space:]]*image:.*$|    image: ${IMAGE}|" docker-compose.yml

            # Pull latest image & bring it up
            sudo docker compose -f docker-compose.yml pull app || true
            sudo docker compose -f docker-compose.yml up -d --no-deps --pull always --force-recreate --remove-orphans app

            # Don't die in wait/probe loops
            set +e; set +u; set +o pipefail
            CID=""; STATUS=""

            # Smoke check through Nginx if present, else direct
            echo "Waiting for container to appear..."
            # Find container
            for i in $(seq 1 30); do
              CID=$(sudo docker ps -qf name=^/shapeshifter$ || true)
              [ -n "${CID:-}" ] && { echo "Container: $CID"; break; }
              sleep 2
            done
            if [ -z "${CID:-}" ]; then
              echo "Container didn't start"
              sudo docker compose -f "$APP_DIR/docker-compose.yml" logs --tail=200 app || true
              # Restore strict flags before exiting
              set -e; set -u; set -o pipefail; exit 1
            fi

            # Health if defined (non-fatal)
            HAS_HEALTH=$(sudo docker inspect shapeshifter --format '{{if .State.Health}}yes{{end}}' 2>/dev/null || echo "")
            if [ "${HAS_HEALTH:-}" = "yes" ]; then
              echo "Waiting for Docker health=healthy..."
              for i in $(seq 1 45); do
                STATUS=$(sudo docker inspect shapeshifter --format '{{.State.Health.Status}}' 2>/dev/null || echo "unknown")
                echo "  health: ${STATUS}"
                [ "${STATUS:-}" = "healthy" ] && break
                sleep 2
              done
              if [ "${STATUS:-}" != "healthy" ]; then
                echo "Health not healthy after wait; last probes:"
                sudo docker inspect shapeshifter --format '{{range .State.Health.Log}}{{.End}} {{.ExitCode}} {{printf "%q" .Output}}{{"\n"}}{{end}}' | tail -6 || true
              fi
            else
              echo "No healthcheck defined; skipping Docker health wait."
            fi

            # Local HTTP Probe (required)
            echo "Probing app on localhost:3000..."
            for i in $(seq 1 30); do
              curl -fsS http://127.0.0.1:3000/ -o /dev/null && { echo "App responds locally."; break; }
              sleep 2
            done
            curl -fsS http://127.0.0.1:3000/ -o /dev/null || {
              echo "App never responded locally"
              sudo docker compose -f "$APP_DIR/docker-compose.yml" logs --tail=200 app || true
              set -e; set -u; set -o pipefail; exit 1
            }

            # HTTPS via Nginx
            echo "Checking through Nginx (HTTPS)..."
            for i in $(seq 1 20); do
              curl -fsS https://shapeshifter.djoshware.com -o /dev/null && {
                echo "HTTPS OK"
                set -e; set -u; set -o pipefail; exit 0
              }
              sleep 3
            done

            echo "HTTPS still failing; nginx errors:"
            sudo tail -n 120 /var/log/nginx/error.log || true
            set -e; set -u; set -o pipefail
            exit 1
